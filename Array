const a = [2,56,8,7,"ram ", "sham" ]
console.log(a[0])

a.push(1000)  // insert element at end
console.log(a) 

a.pop() // remove element from end
console.log(a) 

a.unshift(2000) // add element at starting of array
console.log(a) 

a.shift() // remove the element from starting of array
console.log(a) 

console.log(a.includes(9))

console.log(a.indexOf(7))

const newA = a.join() // make string form 
console.log(a) 
console.log(newA)
console.log(typeof newA) 

//slice , splice

console.log("Original Array :", a)
//Slice :(end index is not included ) and it not modify the array
console.log("slice(1,3) : " , a.slice(1,3)) 
console.log("Array after slice :", a)

//splice : use for remove and add the element .
// include the end index

console.log("splice(1,2) : " , a.splice(1,2))
console.log("Array after splice :", a)
console.log("splice(0,1 , 's','d') :" , a.splice(0,1, 'siya' , 'diya'))
console.log("Array after splice 2:", a)

 // joing to array
 const B=[9,56,78]
 const C=[10,20]
 B.push(C) // Bad method for join array 
 console.log(B)

 const girl=["priya","diya","siya"]
 const boy =["ram" , "sham","prem"]
 SA = girl.concat(boy) // 2nd method (OK OK) concat the 2 arrya
 console.log(SA)

 const student =[...girl , ...boy] //3rd method (best way to combine) two array
console.log(student)

const C_array =[1,5,7,[389,3,5,],9,5,[90,354,56,[45,6,78,]]]
 /* flat: creates a new array with all sub-array elements concatenated into it up to a specified depth.*/
const N_array =C_array.flat(Infinity)
console.log(N_array)


console.log(Array.isArray(C_array))
console.log(Array.isArray("priya"))
console.log(Array.from("rainbow")) // create array of char
console.log(Array.from({name : "siya"})) //The object { name: "siya" } does not have a length property, so Array.from returns an empty array [].

let s1=1000
let s2=2000
let s3 = 3000
console.log(Array.of(s1,s2,s3)) // Array.of create the array